üìö Conte√∫do: Classes Abstratas em POO (Java)


O que √© uma classe abstrata?
Uma classe abstrata √© uma classe que n√£o pode ser instanciada diretamente. Ela pode ter m√©todos abstratos (sem corpo), mas tamb√©m pode ter m√©todos com implementa√ß√£o. A ideia de uma classe abstrata √© fornecer uma base comum para outras classes, permitindo que elas herdem funcionalidades e implementem comportamentos espec√≠ficos.

M√©todos abstratos: S√£o m√©todos declarados, mas sem implementa√ß√£o. As subclasses s√£o obrigadas a implement√°-los.

M√©todos concretos: S√£o m√©todos com implementa√ß√£o, que podem ser herdados ou sobrescritos pelas subclasses.

Principais caracter√≠sticas:
Uma classe abstrata pode ter tanto m√©todos abstratos quanto concretos.

Uma classe abstrata n√£o pode ser instanciada diretamente, mas pode ser instanciada por uma classe que a estenda.

As subclasses de uma classe abstrata devem implementar todos os m√©todos abstratos ou tamb√©m se tornar abstratas.

Uma classe abstrata pode ter atributos (como vari√°veis de inst√¢ncia), ao contr√°rio de interfaces.

Diferen√ßa entre interface e classe abstrata:
Interface: Define apenas o contrato (o que deve ser feito), sem implementa√ß√£o. N√£o pode ter vari√°veis, apenas constantes.

Classe abstrata: Pode fornecer tanto um contrato (m√©todos abstratos) quanto uma implementa√ß√£o (m√©todos concretos). Pode ter vari√°veis de inst√¢ncia.

üìã Exemplo b√°sico:
java
Copiar
Editar
// Classe abstrata
public abstract class Animal {
    // M√©todo abstrato
    public abstract void emitirSom();
    
    // M√©todo concreto
    public void dormir() {
        System.out.println("O animal est√° dormindo.");
    }
}

// Classe concreta que estende a classe abstrata
public class Cachorro extends Animal {
    // Implementa√ß√£o do m√©todo abstrato
    public void emitirSom() {
        System.out.println("O cachorro late.");
    }
}

public class Main {
    public static void main(String[] args) {
        // N√£o √© poss√≠vel instanciar uma classe abstrata
        // Animal animal = new Animal();  // ERRO
        
        // Instanciando uma classe concreta
        Animal cachorro = new Cachorro();
        cachorro.emitirSom(); // Sa√≠da: O cachorro late.
        cachorro.dormir();    // Sa√≠da: O animal est√° dormindo.
    }
}
üî• Dica pr√°tica:
Use classes abstratas quando voc√™ quiser fornecer um comportamento comum, mas ainda exigir que as subclasses implementem m√©todos espec√≠ficos. √â √∫til quando voc√™ tem m√©todos que precisam de um comportamento padr√£o, mas outros precisam ser definidos pelas subclasses.

Exemplo de quando usar: Suponha que voc√™ tenha uma classe Veiculo que tem um m√©todo mover(). Voc√™ pode criar um comportamento comum para mover() e, ao mesmo tempo, deixar que diferentes tipos de ve√≠culos (como Carro, Avi√£o, etc.) implementem seus pr√≥prios comportamentos para o movimento.