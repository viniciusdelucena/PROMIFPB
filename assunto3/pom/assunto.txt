
üìö Conte√∫do: Interfaces em POO (Java)

O que √© uma interface?

Uma interface √© como um contrato que define m√©todos que uma classe precisa implementar.

N√£o tem c√≥digo dentro dos m√©todos (s√≥ a assinatura, ou seja, o nome, par√¢metros e tipo de retorno).

Uma classe que "assina" (implementa) uma interface √© obrigada a criar o comportamento (corpo) dos m√©todos definidos l√°.


----=-=--=-=-=-=-===-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=----

üìå Principais caracter√≠sticas:
Todos os m√©todos em uma interface s√£o p√∫blicos e abstratos (mesmo que voc√™ n√£o escreva public e abstract).

Uma interface n√£o pode ter atributos comuns (mas pode ter constantes: public static final).

Uma classe pode implementar v√°rias interfaces ao mesmo tempo (Java permite heran√ßa m√∫ltipla de interfaces, mas n√£o de classes).

Interface = apenas defini√ß√£o do "o qu√™" fazer, n√£o o "como".

----=-=--=-=-=-=-===-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=---

üìã Exemplo b√°sico:

// Interface
public interface Animal {
    void comer();
    void dormir();
}

// Classe implementando a Interface
public class Cachorro implements Animal {
    public void comer() {
        System.out.println("O cachorro est√° comendo.");
    }

    public void dormir() {
        System.out.println("O cachorro est√° dormindo.");
    }
}
Cachorro √© obrigado a implementar comer() e dormir().

Se esquecer de implementar algum m√©todo, d√° erro de compila√ß√£o!

----=-=--=-=-=-=-===-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=---

üî• Dica pr√°tica:
Use interfaces quando:

Voc√™ quer garantir que v√°rias classes tenham certos m√©todos, mas cada uma possa implementar de forma diferente.

Voc√™ quer programar de maneira mais flex√≠vel e gen√©rica (polimorfismo com interfaces √© muito forte em Java).