üìö Cole√ß√µes em Java

O que s√£o Cole√ß√µes?

Cole√ß√µes s√£o estruturas que armazenam grupos de objetos em Java.
Elas fazem parte da Java Collections Framework, que fornece classes e interfaces para lidar com conjuntos de dados de forma eficiente.

----=-=--=-=-=-=-===-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=----

Principais Interfaces de Cole√ß√µes

Interface	Descri√ß√£o

List	Cole√ß√£o ordenada que permite elementos duplicados.

Set	Cole√ß√£o sem elementos duplicados.

Queue	Cole√ß√£o usada para trabalhar com ordem de processamento (tipo fila).

Map	Armazena pares chave-valor (exemplo: nome ‚Üí idade).

----=-=--=-=-=-=-===-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=----

Principais Implementa√ß√µes

- 1. List

ArrayList: Lista baseada em um array. Acesso r√°pido por √≠ndice. Ideal para buscas.

LinkedList: Lista baseada em n√≥s ligados. Melhor para inser√ß√µes e remo√ß√µes no meio da lista.

Exemplo com ArrayList:

import java.util.ArrayList;

public class Exemplo {
    public static void main(String[] args) {
        ArrayList<String> lista = new ArrayList<>();
        lista.add("Maria");
        lista.add("Jo√£o");
        lista.add("Ana");
        
        System.out.println(lista);  // [Maria, Jo√£o, Ana]
    }
}

----=-=--=-=-=-=-===-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=----

2. Set

HashSet: N√£o garante ordem dos elementos. R√°pido para buscas e inser√ß√µes.

LinkedHashSet: Mant√©m a ordem de inser√ß√£o.

TreeSet: Mant√©m elementos ordenados automaticamente (ordem natural ou personalizada).

Exemplo com HashSet:

import java.util.HashSet;

public class Exemplo {
    public static void main(String[] args) {
        HashSet<String> conjunto = new HashSet<>();
        conjunto.add("Banana");
        conjunto.add("Ma√ß√£");
        conjunto.add("Banana");  // Ignorado (n√£o aceita duplicados)
        
        System.out.println(conjunto);  // [Banana, Ma√ß√£] (ordem pode variar)
    }
}

----=-=--=-=-=-=-===-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=----

3. Queue

LinkedList: Tamb√©m pode ser usada como uma fila (FIFO ‚Äì primeiro a entrar, primeiro a sair).

PriorityQueue: Fila que ordena os elementos automaticamente conforme prioridade.

Exemplo com Queue:

java
Copiar
Editar
import java.util.LinkedList;
import java.util.Queue;

public class Exemplo {
    public static void main(String[] args) {
        Queue<String> fila = new LinkedList<>();
        fila.add("Pessoa1");
        fila.add("Pessoa2");
        fila.add("Pessoa3");

        System.out.println(fila.poll());  // Pessoa1 (remove e retorna)
        System.out.println(fila.peek());  // Pessoa2 (somente retorna, n√£o remove)
    }
}

----=-=--=-=-=-=-===-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=----

4. Map

HashMap: Armazena pares chave-valor. N√£o garante ordem.

LinkedHashMap: Mant√©m a ordem de inser√ß√£o dos pares.

TreeMap: Ordena os pares pela chave.

Exemplo com HashMap:

import java.util.HashMap;

public class Exemplo {
    public static void main(String[] args) {
        HashMap<String, Integer> mapa = new HashMap<>();
        mapa.put("Ana", 25);
        mapa.put("Jo√£o", 30);
        mapa.put("Maria", 22);

        System.out.println(mapa.get("Jo√£o"));  // 30
    }
}

----=-=--=-=-=-=-===-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=----

Resumo Visual

Estrutura	Caracter√≠sticas
List	Elementos ordenados e duplicados permitidos
Set	Elementos √∫nicos, sem duplica√ß√£o
Queue	Ordem de chegada ou prioridade
Map	Pares chave ‚Üí valor
üî• Dicas Importantes
Use List se precisar de ordem e permitir elementos repetidos.

Use Set se precisar garantir unicidade (sem repeti√ß√£o).

Use Queue para fluxo de processos ou ordem de tarefas.

Use Map quando precisar associar chaves a valores.