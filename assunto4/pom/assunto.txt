üìö Polimorfismo na Programa√ß√£o Orientada a Objetos (POO)

O que √© Polimorfismo?

Polimorfismo significa "muitas formas".
Em programa√ß√£o orientada a objetos, √© a capacidade de um mesmo m√©todo ou comportamento se comportar de maneiras diferentes dependendo do objeto que o utiliza.

----=-=--=-=-=-=-===-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=----

Tipos de Polimorfismo

1. Polimorfismo de Sobrecarga (Overloading)
Ocorre dentro da mesma classe.

O m√©todo tem o mesmo nome, mas par√¢metros diferentes (tipo, n√∫mero ou ordem).

Exemplo:

class Calculadora {
    public int soma(int a, int b) {
        return a + b;
    }

    public double soma(double a, double b) {
        return a + b;
    }
}

Aqui, o m√©todo soma se adapta dependendo dos tipos dos argumentos.

----=-=--=-=-=-=-===-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=----

2. Polimorfismo de Substitui√ß√£o (Override)

Ocorre quando uma classe filha sobrescreve um m√©todo da classe pai.

√â usado para alterar o comportamento herdado.

Usa-se a anota√ß√£o @Override no Java para indicar substitui√ß√£o.

Exemplo:

class Animal {
    public void fazerSom() {
        System.out.println("Som de animal");
    }
}

class Cachorro extends Animal {
    @Override
    public void fazerSom() {
        System.out.println("Au Au");
    }
}

----=-=--=-=-=-=-===-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=----

Polimorfismo com Interfaces
Uma interface define um conjunto de m√©todos que classes diferentes podem implementar de formas distintas.

Exemplo:

interface Forma {
    void desenhar();
}

class Circulo implements Forma {
    public void desenhar() {
        System.out.println("Desenhando um c√≠rculo");
    }
}

class Quadrado implements Forma {
    public void desenhar() {
        System.out.println("Desenhando um quadrado");
    }
}

----=-=--=-=-=-=-===-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=----

Resumo R√°pido:

Tipo	Caracter√≠stica

Sobrecarga (Overloading)	Mesma classe, m√©todos com mesmo nome e par√¢metros diferentes

Substitui√ß√£o (Override)	Classe filha modifica o comportamento do m√©todo do pai

Interfaces	Classes diferentes implementam m√©todos de maneira √∫nica

----=-=--=-=-=-=-===-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=----

üî• Dicas Importantes

Polimorfismo facilita a manuten√ß√£o e a extens√£o de sistemas.

Voc√™ pode tratar diferentes objetos de forma gen√©rica usando o tipo da superclasse ou da interface.

O uso correto do polimorfismo deixa o c√≥digo mais flex√≠vel e reaproveit√°vel.